[
  {
    "objectID": "tidytuesday_exercise.html",
    "href": "tidytuesday_exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "library(tidytuesdayR)\nlibrary(tidyverse) \n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(lubridate) #change data type to data\n\nLoading required package: timechange\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(skimr) #skim dataframes\nlibrary(plotly) #interactive plots \n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(ggstatsplot) #stats plots \n\nYou can cite this package as:\n     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.\n     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n\nlibrary(gt) #create tables \nlibrary(scales) #build unique color pallets\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nlibrary(knitr) #format table output\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows"
  },
  {
    "objectID": "visualization_exercise.html",
    "href": "visualization_exercise.html",
    "title": "Visualization Exercise",
    "section": "",
    "text": "This data set contains the deaths involving COVID-19, pneumonia, and influenza reported to NCHS by sex, age group, and jurisdiction. This data was obtained from the Centers for Disease Control and Prevention (CDC)’s National Center for Health Statistics (NCHS).\nI decided to recreate some of my figures from last week as interactive graphs.\n\n\n\n\nhere() starts at /Users/deannalanier/Desktop/All_Classes_UGA/2023Spr_Classes/MADA/deannalanier-MADA-portfolio\n\n\nLoading required package: ggplot2\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n✔ purrr   1.0.1      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks plotly::filter(), stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nLoading required package: timechange\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\n\n\n\n\n\ndata_location=here(\"dataanalysis-exercise\",\"output\",\"clean_data.rds\")\nprocessedData = readRDS(data_location)\n\n\n\n\n\ndata_plot = processedData %>% filter(Group == \"By Year\")\n\n\n#Create list for each of the variable that we want to separate as differnt buttons \n\nCOVID_19 = list(\n  x=processedData$Year, \n  y=processedData$COVID_19_Deaths,\n  xref='x', yref='y'\n)\n\nPneumonia = list(\n  x=processedData$Year, \n  y=processedData$Pneumonia_Deaths,\n  xref='x', yref='y'\n)\n\nInfluenza = list(\n  x=processedData$Year, \n  y=processedData$Influenza_Deaths,\n  xref='x', yref='y'\n)\n\n\nupdatemenus = list(\n  list(\n    active = 0,\n    type= 'buttons',\n    direction = \"right\",\n    xanchor = 'right',\n    yanchor = \"bottom\",\n    pad = list('r'= 0, 't'= 0, 'b' = 0),\n    x = 0.5,\n    y = 1.15,\n    buttons = list(\n      list(\n        label = \"COVID-19\",\n        method = \"update\",\n        args = list(list(visible = c(TRUE, FALSE, FALSE)),\n                    list(title = \"Covid-19 Related Deaths\",\n                         annotations = list(c(), c(), COVID_19)))),\n      list(\n        label = \"Pneumonia\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE, TRUE, FALSE)),\n                    list(title = \"Pneumonia Related Deaths \",\n                         annotations = list( c(), Pneumonia, c())))),\n      list(\n        label = \"Influenza\",\n        method = \"update\",\n        args = list(list(visible = c(FALSE, FALSE, TRUE)),\n                    list(title = \"Influenza Related Deaths\",\n                         annotations = list(Influenza, c(), c())))),\n      list(\n        label = \"All\",\n        method = \"update\",\n        args = list(list(visible = c(TRUE, TRUE, TRUE)),\n                    list(title = \"All Respiratory Virus Related Deaths\",\n                         annotations = list(c(), c(), c())))))\n  )\n)\n\n\nbar_fig = plot_ly(processedData, x = ~Year, y = ~COVID_19_Deaths, type = 'bar', name = 'Covid-19 Deaths')%>% \n  add_trace(y = ~Pneumonia_Deaths, name = 'Pneumonia Deaths')%>% \n  add_trace(y = ~Influenza_Deaths, name = 'Flu Deaths')%>% \n  layout(title = list(text='All Respiratory Virus Related Deaths 2020-2021', y = 0.95, x = 0.5, xanchor = 'left', yanchor =  'bottom'),yaxis = list(title = 'Count'), barmode = 'group',xaxis = list(title = \"Year\"),updatemenus=updatemenus)\n\nbar_fig\n\n\n\n\n\n\n\n\n\nMonth_data_location=here(\"dataanalysis-exercise\",\"data\",\"Provisional_COVID-19_Deaths_by_Sex_and_Age.csv\")\nMonthData = read_csv(Month_data_location)\n\nRows: 115668 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Data As Of, Start Date, End Date, Group, State, Sex, Age Group, Foo...\ndbl (8): Year, Month, COVID-19 Deaths, Total Deaths, Pneumonia Deaths, Pneum...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n#remove special characters\nnames(MonthData) = gsub(\" \", \"_\",\n           gsub(\"-\", \"_\",\n           gsub(\",\", \"\", names(MonthData))))\n\nMonthData = MonthData %>% \n  mutate_at(\n    vars('Data_As_Of', 'Start_Date','End_Date'), \n    as_date,\n    format = \"%m-%d-%y\"\n    )%>% mutate(Year = as.character(Year)) %>% \n  filter(State == \"United States\",Age_Group==\"All Ages\", Sex == \"All Sexes\", Group==\"By Month\", Year == 2020 | Year == 2021 | Year == 2022)%>%\n  select(Start_Date, End_Date, COVID_19_Deaths,Pneumonia_Deaths,Influenza_Deaths, Sex, Year, Month)\n\n###Plot\n\nline_fig = plot_ly(MonthData, type = 'scatter', mode = 'lines', colors = \"Set1\")%>%\n  add_trace(x = ~Start_Date, y = ~COVID_19_Deaths, name = 'Covid-19 Deaths' )%>%\n  add_trace(x = ~Start_Date,y = ~Pneumonia_Deaths, name = 'Pneumonia Deaths')%>%\n  add_trace(x = ~Start_Date,y = ~Influenza_Deaths, name = 'Flu Deaths')%>%\n  layout(paper_bgcolor='#D4D4D4',plot_bgcolor='#D4D4D4',showlegend = T, title='Respiratory virus related deaths 2020-2022',\n         xaxis = list(rangeslider = list(visible = T),\n                      rangeselector=list(\n                        buttons=list(\n                          list(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n                          list(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n                          list(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n                          list(step=\"all\")\n                        ))))\nline_fig = line_fig %>%\n  layout(\n         xaxis = list(zerolinecolor = '#D4D4D4',\n                      zerolinewidth = 2,\n                      gridcolor = '#D4D4D4',color ='000000', title = 'Date'),\n         yaxis = list(zerolinecolor = '#D4D4D4',\n                      zerolinewidth = 2,\n                      gridcolor = '#D4D4D4', color ='000000',title = '# of Deaths'),\n         plot_bgcolor='#fff', width = 800)\n\nWarning: Specifying width/height in layout() is now deprecated.\nPlease specify in ggplotly() or plot_ly()\n\nline_fig\n\n\n\n\n\n##Comments Using Plotly in R was fairly straight forward and I didnt not have any difficulty making these plots interactive. My next goal is to figure out how to use the animation features."
  },
  {
    "objectID": "coding_exercise.html",
    "href": "coding_exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "#install and load required packages\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   1.0.1 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n#install and load required packages\nlibrary(dslabs)\n#find gapminder data to be used for exercise\n#help(gapminder)\n\n\nstr(gapminder) #get an overview of the data structure\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\n\n\nsummary(gapminder) #get a summary of the data\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n\n\nclass(gapminder) #determine the type of object gapminer is \n\n[1] \"data.frame\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Deanna Lanier’s website and data analysis portfolio",
    "section": "",
    "text": "Hi There!\n\nWelcome to my website and data analysis portfolio\nHi everyone, I am Deanna Lanier. This website will be used for the Spring 2023 Modern Applied Data Analysis course.\n\nRead more about me on my About Me page above.\nLooking forward to a great semester!"
  },
  {
    "objectID": "coding_exercise.html#process-data-and-plotting",
    "href": "coding_exercise.html#process-data-and-plotting",
    "title": "R Coding Exercise",
    "section": "Process Data and Plotting",
    "text": "Process Data and Plotting\n\n#save all data to \"data\"\ndata = gapminder\n\n# subset based on Continent == Africa\nafricaData = data[ which(data$continent==\"Africa\"), ]\n\nstr(africaData) #get an overview of the data structure\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\n\n\nsummary(gapminder) #get a summary of the data\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586"
  },
  {
    "objectID": "coding_exercise.html#more-processing",
    "href": "coding_exercise.html#more-processing",
    "title": "R Coding Exercise",
    "section": "More Processing",
    "text": "More Processing\n\n# determine the years with missing values for NA\ninfantNA  = (africaData[is.na(africaData$infant_mortality), ]  )\ntable(infantNA$year)\n\n\n1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 \n  10   17   16   16   15   14   13   11   11    7    5    6    6    6    5    5 \n1976 1977 1978 1979 1980 1981 2016 \n   3    3    2    2    1    1   51 \n\n\n\n# subset year 2000\n\ny_2000 = africaData[ which(africaData$year==\"2000\"), ]\nsummary(y_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\n\n# Plot life expectancy as a function of infant mortality \n\nggplot(infantM_LifeE, aes(x=infant_mortality, y=life_expectancy)) + geom_point()\n\nWarning: Removed 226 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n# Plot life expectancy as a function of infant mortality \n\nggplot(y_2000, aes(x=population, y=life_expectancy)) + geom_point() +scale_x_continuous(trans='log10')\n\n\n\n\n\n# use lm function and fit life expectancy as the outcome and infant mortality as the predictor. Then use the pipulation size as the predictor (only from 2000) save the result from the two fits into two objects (fit1 and fit2) and apply summary to both \n\n#outcome second predictor first \n\nfit1 = lm(life_expectancy~infant_mortality, data=y_2000)\nfit1_table = broom::tidy(fit1)\nprint(fit1_table)\n\n# A tibble: 2 × 5\n  term             estimate std.error statistic  p.value\n  <chr>               <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)        71.3      2.43       29.4  8.91e-33\n2 infant_mortality   -0.189    0.0287     -6.59 2.83e- 8\n\n\n\nfit2 = lm(life_expectancy~population, data=y_2000)\nfit2_table = broom::tidy(fit2)\nprint(fit2_table)\n\n# A tibble: 2 × 5\n  term             estimate    std.error statistic  p.value\n  <chr>               <dbl>        <dbl>     <dbl>    <dbl>\n1 (Intercept) 55.9          1.47            38.1   4.51e-38\n2 population   0.0000000276 0.0000000546     0.505 6.16e- 1"
  },
  {
    "objectID": "coding_exercise.html#more-processing-and-plotting",
    "href": "coding_exercise.html#more-processing-and-plotting",
    "title": "R Coding Exercise",
    "section": "More Processing and Plotting",
    "text": "More Processing and Plotting\n\n# determine the years with missing values for NA\ninfantNA  = (africaData[is.na(africaData$infant_mortality), ]  )\ntable(infantNA$year)\n\n\n1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 \n  10   17   16   16   15   14   13   11   11    7    5    6    6    6    5    5 \n1976 1977 1978 1979 1980 1981 2016 \n   3    3    2    2    1    1   51"
  },
  {
    "objectID": "coding_exercise.html#simple-fit",
    "href": "coding_exercise.html#simple-fit",
    "title": "R Coding Exercise",
    "section": "Simple Fit",
    "text": "Simple Fit\nlinear model to fit outcome = life expectancy and predictor = infant mortality\n\nfit1 = lm(life_expectancy~infant_mortality, data=y_2000)\nfit1_table = broom::tidy(fit1)\nprint(fit1_table)\n\n# A tibble: 2 × 5\n  term             estimate std.error statistic  p.value\n  <chr>               <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)        71.3      2.43       29.4  8.91e-33\n2 infant_mortality   -0.189    0.0287     -6.59 2.83e- 8"
  },
  {
    "objectID": "coding_exercise.html#section",
    "href": "coding_exercise.html#section",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Infant Mortality and Life Expectancy\n\n#Subset Africa infant mortality and life expectancy\ninfantM_LifeE = africaData[c(\"infant_mortality\", \"life_expectancy\")]\n\nstr(infantM_LifeE) #get an overview of the data structure\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n\n\nsummary(infantM_LifeE)#get a summary of the data\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226"
  },
  {
    "objectID": "coding_exercise.html#section-1",
    "href": "coding_exercise.html#section-1",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Infant Mortality and Life Expectancy\n\n#Subset Africa infant mortality and life expectancy\ninfantM_LifeE = africaData[c(\"infant_mortality\", \"life_expectancy\")]\n\nstr(infantM_LifeE) #get an overview of the data structure\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n\n#####this section is added by Weifan\n\n### using select function to extract a data frame only include infant mortality and life expectancy\ninfantM_LifeE2=select(africaData, infant_mortality,life_expectancy)\n###get an overview of the data structure\nstr(infantM_LifeE2)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\n###get a summary of the data\nsummary(infantM_LifeE2)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n\n\nsummary(infantM_LifeE)#get a summary of the data\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226"
  },
  {
    "objectID": "coding_exercise.html#section-2",
    "href": "coding_exercise.html#section-2",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Plot life expectancy as a function of infant mortality \n\n# Plot life expectancy as a function of infant mortality \nggplot(infantM_LifeE, aes(x=infant_mortality, y=life_expectancy)) + geom_point()+xlab(\"Infant Mortality\")+ ylab(\"Life Expectancy (Years)\")+\n  theme_bw()\n\nWarning: Removed 226 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "coding_exercise.html#section-3",
    "href": "coding_exercise.html#section-3",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Population and Life Expectancy\n\n#Subset Africa population and life expectancy\npop_LifeE = africaData[c(\"population\", \"life_expectancy\")]\nstr(pop_LifeE) #get an overview of the data structure\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\n\n\nsummary(pop_LifeE) #get a summary of the data\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51"
  },
  {
    "objectID": "coding_exercise.html#section-4",
    "href": "coding_exercise.html#section-4",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Plot life expectancy as a function of population\n\n# Plot life expectancy as a function of population\nggplot(pop_LifeE, aes(x=log(population), y=life_expectancy)) + geom_point() +xlab(\"Population (log)\")+ ylab(\"Life Expectancy (Years)\")+\n  theme_bw()\n\nWarning: Removed 51 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "coding_exercise.html#section-5",
    "href": "coding_exercise.html#section-5",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Year 2000\n\n# subset year 2000\ny_2000 = africaData[ which(africaData$year==\"2000\"), ]\nsummary(y_2000) #get a summary of the data\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0"
  },
  {
    "objectID": "coding_exercise.html#section-6",
    "href": "coding_exercise.html#section-6",
    "title": "R Coding Exercise",
    "section": "",
    "text": "plot life expectancy as a function of infant mortality\n\n# Plot life expectancy as a function of infant mortality \nggplot(y_2000, aes(x=infant_mortality, y=life_expectancy)) + geom_point() +xlab(\"Infant Mortality\")+ ylab(\"Life Expectancy (Years)\")+\n  theme_bw()"
  },
  {
    "objectID": "coding_exercise.html#section-7",
    "href": "coding_exercise.html#section-7",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Plot life expectancy as a function of infant mortality \n\n# Plot life expectancy as a function of infant mortality \n\nggplot(y_2000, aes(x=log(population), y=life_expectancy)) + geom_point() +xlab(\"Population (log)\")+ ylab(\"Life Expectancy (Years)\")+\n  theme_bw()\n\n\n\n\n#####This section added by Weifan\n\n###find out if there is any missing value of fertility and gdp in year 2000\nsummary(y_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n###since there is no missing value in year 2000, we still choose this year to plot life expectancy as a function of fertility\ny_2000%>%\n  ggplot(aes(x=fertility,y=life_expectancy,color=region))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE,color=\"green\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n  labs(x=\"fertility\",y=\"life_expectancy\", title=\"relationship between life expectancy and fertility\")+\n  theme_minimal()\n\nNULL\n\n###plot life expectancy as a function of gdp\ny_2000%>%\n  ggplot(aes(x=gdp,y=life_expectancy,color=region))+\n  geom_point()+\n  geom_smooth(method=\"lm\",se=FALSE,color=\"red\")+\n  labs(x=\"gdp\",y=\"life_expectancy\", title=\"relationship between life expectancy and gdp in five different regions\")+\n  scale_x_log10(labels=scales::dollar_format())\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "coding_exercise.html#section-8",
    "href": "coding_exercise.html#section-8",
    "title": "R Coding Exercise",
    "section": "",
    "text": "linear model to fit outcome = life expectancy and predictor = population\n\nfit2 = lm(life_expectancy~population, data=y_2000)\nfit2_table = broom::tidy(fit2)\nprint(fit2_table)\n\n# A tibble: 2 × 5\n  term             estimate    std.error statistic  p.value\n  <chr>               <dbl>        <dbl>     <dbl>    <dbl>\n1 (Intercept) 55.9          1.47            38.1   4.51e-38\n2 population   0.0000000276 0.0000000546     0.505 6.16e- 1\n\n\n\n\nthis section is added by Weifan\n\n###linear model to predict life expectancy using fertility\nlm1=lm(life_expectancy~fertility, data=y_2000)\ntable1=broom::tidy(lm1)%>%\n  knitr::kable(digits=3)\n###linear model to predict life expectancy using gdp\nlm2=lm(life_expectancy~gdp,data=y_2000)\ntable2=broom::tidy(lm2)%>%\n  knitr::kable(digits=3)\ntable1\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n76.075\n3.348\n22.720\n0\n\n\nfertility\n-3.823\n0.625\n-6.113\n0\n\n\n\n\ntable2\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n55.014\n1.247\n44.106\n0.000\n\n\ngdp\n0.000\n0.000\n2.516\n0.015"
  },
  {
    "objectID": "coding_exercise.html#section-9",
    "href": "coding_exercise.html#section-9",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Based on the p-values of the linear models, a conclusion can be made that there is a statistical relationship between life expectancy and infant mortality but not life expectancy and population. ###this section is added by Weifan based on the p_values of two models, we can conclude that life expectancy can be predicted by both variables (fertility and GDP)"
  },
  {
    "objectID": "coding_exercise.html#section-10",
    "href": "coding_exercise.html#section-10",
    "title": "R Coding Exercise",
    "section": "",
    "text": "Based on the p-values of the linear models, a conclusion can be made that there is a statistical relationship between life expectancy and infant mortality but not life expectancy and population. ###this section is added by Weifan based on the p_values of two models, we can conclude that life expectancy can be predicted by both variables (fertility and GDP)"
  },
  {
    "objectID": "dataanalysis_exercise.html",
    "href": "dataanalysis_exercise.html",
    "title": "Data Analysis Exercise",
    "section": "",
    "text": "This data set contains the deaths involving COVID-19, pneumonia, and influenza reported to NCHS by sex, age group, and jurisdiction\n\n\nThis data was obtained from the Centers for Disease Control and Prevention (CDC)’s National Center for Health Statistics (NCHS).\n\n\n\nThis dataset contains 116,000 rows and 16 columns."
  },
  {
    "objectID": "dataanalysis_exercise.html#load-libraries",
    "href": "dataanalysis_exercise.html#load-libraries",
    "title": "Data Analysis Exercise",
    "section": "Load Libraries",
    "text": "Load Libraries\n\n\nLoading required package: ggplot2\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n✔ purrr   1.0.1      \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nLoading required package: timechange\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union"
  },
  {
    "objectID": "dataanalysis_exercise.html#load-data",
    "href": "dataanalysis_exercise.html#load-data",
    "title": "Data Analysis Exercise",
    "section": "Load Data",
    "text": "Load Data\n\nRaw_Data <- read_csv(\"dataanalysis-exercise/data/Provisional_COVID-19_Deaths_by_Sex_and_Age.csv\")\n\nRows: 115668 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Data As Of, Start Date, End Date, Group, State, Sex, Age Group, Foo...\ndbl (8): Year, Month, COVID-19 Deaths, Total Deaths, Pneumonia Deaths, Pneum...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "dataanalysis_exercise.html#data-contents-1",
    "href": "dataanalysis_exercise.html#data-contents-1",
    "title": "Data Analysis Exercise",
    "section": "Data Contents",
    "text": "Data Contents\n\nstr(Raw_Data)\n\nspc_tbl_ [115,668 × 16] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Data As Of                              : chr [1:115668] \"01/25/2023\" \"01/25/2023\" \"01/25/2023\" \"01/25/2023\" ...\n $ Start Date                              : chr [1:115668] \"01/01/2020\" \"01/01/2020\" \"01/01/2020\" \"01/01/2020\" ...\n $ End Date                                : chr [1:115668] \"01/21/2023\" \"01/21/2023\" \"01/21/2023\" \"01/21/2023\" ...\n $ Group                                   : chr [1:115668] \"By Total\" \"By Total\" \"By Total\" \"By Total\" ...\n $ Year                                    : num [1:115668] NA NA NA NA NA NA NA NA NA NA ...\n $ Month                                   : num [1:115668] NA NA NA NA NA NA NA NA NA NA ...\n $ State                                   : chr [1:115668] \"United States\" \"United States\" \"United States\" \"United States\" ...\n $ Sex                                     : chr [1:115668] \"All Sexes\" \"All Sexes\" \"All Sexes\" \"All Sexes\" ...\n $ Age Group                               : chr [1:115668] \"All Ages\" \"Under 1 year\" \"0-17 years\" \"1-4 years\" ...\n $ COVID-19 Deaths                         : num [1:115668] 1098594 413 1446 227 444 ...\n $ Total Deaths                            : num [1:115668] 10215767 59245 105422 11382 17721 ...\n $ Pneumonia Deaths                        : num [1:115668] 1036445 798 2258 496 643 ...\n $ Pneumonia and COVID-19 Deaths           : num [1:115668] 551596 68 367 54 129 ...\n $ Influenza Deaths                        : num [1:115668] 19209 49 367 116 165 ...\n $ Pneumonia, Influenza, or COVID-19 Deaths: num [1:115668] 1600437 1190 3688 780 1115 ...\n $ Footnote                                : chr [1:115668] NA NA NA NA ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Data As Of` = col_character(),\n  ..   `Start Date` = col_character(),\n  ..   `End Date` = col_character(),\n  ..   Group = col_character(),\n  ..   Year = col_double(),\n  ..   Month = col_double(),\n  ..   State = col_character(),\n  ..   Sex = col_character(),\n  ..   `Age Group` = col_character(),\n  ..   `COVID-19 Deaths` = col_double(),\n  ..   `Total Deaths` = col_double(),\n  ..   `Pneumonia Deaths` = col_double(),\n  ..   `Pneumonia and COVID-19 Deaths` = col_double(),\n  ..   `Influenza Deaths` = col_double(),\n  ..   `Pneumonia, Influenza, or COVID-19 Deaths` = col_double(),\n  ..   Footnote = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "dataanalysis_exercise.html#determine-what-data-to-keep",
    "href": "dataanalysis_exercise.html#determine-what-data-to-keep",
    "title": "Data Analysis Exercise",
    "section": "Determine what data to keep",
    "text": "Determine what data to keep\n\ndfm = data %>% pivot_longer(cols=c('COVID_19_Deaths','Pneumonia_Deaths','Influenza_Deaths'),\n                    names_to=\"variable\",\n                    values_to=\"value\")\nyear_plot = ggplot(dfm,aes(x = Year,y = value)) + \n    geom_bar(aes(fill = variable),stat = \"identity\",position = \"dodge\")+theme(legend.position = \"bottom\",legend.key.width= unit(0.1, 'cm'), legend.title= element_blank(),axis.text.x=element_text(size=9))\n\nage_plot = ggplot(dfm,aes(x = Age_Group,y = value)) + \n    geom_bar(aes(fill = variable),stat = \"identity\",position = \"dodge\")+theme(legend.position=\"none\",axis.text.x = element_text(size = 10, angle=60, hjust=1))\n\n\nyear_plot\n\nWarning: Removed 91149 rows containing missing values (`geom_bar()`).\n\n\n\n\nage_plot\n\nWarning: Removed 91149 rows containing missing values (`geom_bar()`).\n\n\n\n\n\nAccording to the footnotes column, there are multiple data points that had been suppressed due to NCHS confidentiality standards. Separated by state and/or age have many points that have been suppressed. The best option is to subset the data by year, and keep only rows containing all ages, and states.\nSubset to keep\ncollected in 2020 and 2021\n\nclean_data = data %>% filter(State == \"United States\",Age_Group==\"All Ages\",Year == 2020 | Year == 2021, Sex == \"All Sexes\")%>%\n  select(Start_Date, End_Date, COVID_19_Deaths,Pneumonia_Deaths,Influenza_Deaths, Group, Sex, Year)\n\n\nclean_data\n\n# A tibble: 26 × 8\n   Start_Date End_Date   COVID_19_Deaths Pneumonia_D…¹ Influ…² Group Sex   Year \n   <date>     <date>               <dbl>         <dbl>   <dbl> <chr> <chr> <chr>\n 1 2020-01-01 2020-12-31          385666        352010    8787 By Y… All … 2020 \n 2 2021-01-01 2021-12-31          463199        412020    1092 By Y… All … 2021 \n 3 2020-01-01 2020-01-31               6         17909    2125 By M… All … 2020 \n 4 2020-02-01 2020-02-29              25         15740    2373 By M… All … 2020 \n 5 2020-03-01 2020-03-31            7174         22479    2437 By M… All … 2020 \n 6 2020-04-01 2020-04-30           65550         46427    1237 By M… All … 2020 \n 7 2020-05-01 2020-05-31           38329         29010     126 By M… All … 2020 \n 8 2020-06-01 2020-06-30           18026         19294      40 By M… All … 2020 \n 9 2020-07-01 2020-07-31           31135         27121      50 By M… All … 2020 \n10 2020-08-01 2020-08-31           29911         27358      43 By M… All … 2020 \n# … with 16 more rows, and abbreviated variable names ¹​Pneumonia_Deaths,\n#   ²​Influenza_Deaths"
  },
  {
    "objectID": "tidytuesday_exercise.html#add-data",
    "href": "tidytuesday_exercise.html#add-data",
    "title": "Tidy Tuesday Exercise",
    "section": "Add Data",
    "text": "Add Data\n\nage_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')\n\nRows: 1155 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): movie_name, director, actor_1_name, actor_2_name, character_1_gend...\ndbl  (5): release_year, age_difference, couple_number, actor_1_age, actor_2_age\ndate (2): actor_1_birthdate, actor_2_birthdate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "tidytuesday_exercise.html#clean-and-explore-the-data",
    "href": "tidytuesday_exercise.html#clean-and-explore-the-data",
    "title": "Tidy Tuesday Exercise",
    "section": "Clean and Explore the data",
    "text": "Clean and Explore the data\n\nglimpse(age_gaps)\n\nRows: 1,155\nColumns: 13\n$ movie_name         <chr> \"Harold and Maude\", \"Venus\", \"The Quiet American\", …\n$ release_year       <dbl> 1971, 2006, 2002, 1998, 2010, 1992, 2009, 1999, 199…\n$ director           <chr> \"Hal Ashby\", \"Roger Michell\", \"Phillip Noyce\", \"Joe…\n$ age_difference     <dbl> 52, 50, 49, 45, 43, 42, 40, 39, 38, 38, 36, 36, 35,…\n$ couple_number      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ actor_1_name       <chr> \"Ruth Gordon\", \"Peter O'Toole\", \"Michael Caine\", \"D…\n$ actor_2_name       <chr> \"Bud Cort\", \"Jodie Whittaker\", \"Do Thi Hai Yen\", \"T…\n$ character_1_gender <chr> \"woman\", \"man\", \"man\", \"man\", \"man\", \"man\", \"man\", …\n$ character_2_gender <chr> \"man\", \"woman\", \"woman\", \"woman\", \"man\", \"woman\", \"…\n$ actor_1_birthdate  <date> 1896-10-30, 1932-08-02, 1933-03-14, 1930-09-17, 19…\n$ actor_2_birthdate  <date> 1948-03-29, 1982-06-03, 1982-10-01, 1975-11-08, 19…\n$ actor_1_age        <dbl> 75, 74, 69, 68, 81, 59, 62, 69, 57, 77, 59, 56, 65,…\n$ actor_2_age        <dbl> 23, 24, 20, 23, 38, 17, 22, 30, 19, 39, 23, 20, 30,…\n\n\n\n#Change the column order \nage_gaps = age_gaps %>%\n  relocate(actor_1_birthdate,actor_1_age,character_1_gender, .after = actor_1_name) %>%\n  relocate(actor_2_birthdate,actor_2_age,character_2_gender, .after = actor_2_name)%>%\n  relocate(couple_number, .before = age_difference)\n\n\nTable displaying the data\n\nhead(age_gaps) %>% \n  gt() %>%\n  tab_header(\n    title = \"Tidy Tuesday - Hollywood Age Gaps\",\n    subtitle = \"Reformated\"\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     ))\n\n\n\n\n\n  \n    \n      Tidy Tuesday - Hollywood Age Gaps\n    \n    \n      Reformated\n    \n  \n  \n    \n      movie_name\n      release_year\n      director\n      couple_number\n      age_difference\n      actor_1_name\n      actor_1_birthdate\n      actor_1_age\n      character_1_gender\n      actor_2_name\n      actor_2_birthdate\n      actor_2_age\n      character_2_gender\n    \n  \n  \n    Harold and Maude\n1971\nHal Ashby\n1\n52\nRuth Gordon\n1896-10-30\n75\nwoman\nBud Cort\n1948-03-29\n23\nman\n    Venus\n2006\nRoger Michell\n1\n50\nPeter O'Toole\n1932-08-02\n74\nman\nJodie Whittaker\n1982-06-03\n24\nwoman\n    The Quiet American\n2002\nPhillip Noyce\n1\n49\nMichael Caine\n1933-03-14\n69\nman\nDo Thi Hai Yen\n1982-10-01\n20\nwoman\n    The Big Lebowski\n1998\nJoel Coen\n1\n45\nDavid Huddleston\n1930-09-17\n68\nman\nTara Reid\n1975-11-08\n23\nwoman\n    Beginners\n2010\nMike Mills\n1\n43\nChristopher Plummer\n1929-12-13\n81\nman\nGoran Visnjic\n1972-09-09\n38\nman\n    Poison Ivy\n1992\nKatt Shea\n1\n42\nTom Skerritt\n1933-08-25\n59\nman\nDrew Barrymore\n1975-02-22\n17\nwoman\n  \n  \n  \n\n\n\n\n\n\nNumeric Data Summary\n\n#numeric data summary\nnumeric_summary=skim(age_gaps,where(is.numeric))\nnumeric_summary = data.frame(numeric_summary)\n\n#Display as a table \n(numeric_summary) %>% \n  gt() %>%\n  tab_header(\n    title = \"Numeric Data Summary\"\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     ))\n\n\n\n\n\n  \n    \n      Numeric Data Summary\n    \n    \n  \n  \n    \n      skim_type\n      skim_variable\n      n_missing\n      complete_rate\n      numeric.mean\n      numeric.sd\n      numeric.p0\n      numeric.p25\n      numeric.p50\n      numeric.p75\n      numeric.p100\n      numeric.hist\n    \n  \n  \n    numeric\nrelease_year\n0\n1\n2000.799134\n16.3658191\n1935\n1997\n2004\n2012\n2022\n▁▁▁▆▇\n    numeric\ncouple_number\n0\n1\n1.398268\n0.7544188\n1\n1\n1\n2\n7\n▇▁▁▁▁\n    numeric\nage_difference\n0\n1\n10.424242\n8.5110857\n0\n4\n8\n15\n52\n▇▃▂▁▁\n    numeric\nactor_1_age\n0\n1\n40.635498\n10.4241730\n18\n33\n39\n47\n81\n▂▇▅▂▁\n    numeric\nactor_2_age\n0\n1\n30.211255\n7.4959523\n17\n25\n29\n34\n68\n▇▇▂▁▁\n  \n  \n  \n\n\n\n\n\n\nDetermine the age range difference and the count of occurences as a table\n\n#find the frequency of unique age gap values\nageRange = as.data.frame(table(age_gaps$age_difference)) \n#rename Var1 to Age_Gap\nageRange = rename(ageRange, Age_Gap = Var1)\n#ageRange = ageRange %>% arrange(desc(Freq))\n\n#create table based on the frequence\nageRange_Table = ageRange%>% \n  gt()%>% \ncols_label(\n   Age_Gap = md(\"**Age Gap**\"),\n   Freq = md(\"**Freq**\")\n  )%>% \n  tab_header(\n    title = \"Age Gap Frequency\",\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     ))\n\n#heat map of the frequencies\nminfreq = min(ageRange$Freq)\nmaxfreq = max(ageRange$Freq)\nageGap_Pallet = col_numeric(c(\"#FEF0D9\", \"#990000\"), domain = c(minfreq, maxfreq), alpha = 0.75)\n\n(ageRange_Table = ageRange_Table %>% \n    data_color(columns = c(Freq),\n               colors = ageGap_Pallet))\n\n\n\n\n\n  \n    \n      Age Gap Frequency\n    \n    \n  \n  \n    \n      Age Gap\n      Freq\n    \n  \n  \n    0\n30\n    1\n77\n    2\n85\n    3\n85\n    4\n66\n    5\n71\n    6\n50\n    7\n71\n    8\n59\n    9\n52\n    10\n45\n    11\n51\n    12\n36\n    13\n37\n    14\n31\n    15\n22\n    16\n33\n    17\n30\n    18\n30\n    19\n21\n    20\n20\n    21\n25\n    22\n11\n    23\n13\n    24\n15\n    25\n18\n    26\n10\n    27\n6\n    28\n10\n    29\n8\n    30\n8\n    31\n2\n    32\n6\n    33\n3\n    34\n4\n    35\n2\n    36\n2\n    38\n2\n    39\n1\n    40\n1\n    42\n1\n    43\n1\n    45\n1\n    49\n1\n    50\n1\n    52\n1\n  \n  \n  \n\n\n\n\nWe can see from this table that smaller age gaps are more frequent than larger age gaps. Lets visualize this data as a bar plot\n\nage_bar = ggplot(ageRange, aes(x = Age_Gap, y = Freq)) +\n  geom_col(width = 0.3,color=\"blue\") + theme(axis.text.x = element_text(face=\"bold\", \n                           size=8, angle=45)) + xlab(\"Age Gap (Years)\") + ylab(\"Frequency\") +ggtitle(\"Age Gap Frequency\") +theme(\n  plot.title = element_text(color=\"Black\", size=14, face=\"bold\"))\nggplotly(age_bar)\n\n\n\n\n\nAs the age increases, the frequency decreases.\n##Sex distribution of the the older and younger actors\n\n#find the frequency of unique age gap values\nactor1Freq = as.data.frame(table(age_gaps$character_1_gender)) \n#rename Var1 to Age_Gap\nactor1Freq = rename(actor1Freq, Sex = Var1)\n\n#create table based on the frequence\nactor1_Table = actor1Freq%>% \n  gt()%>% \ncols_label(\n   Sex = md(\"**Sex**\"),\n   Freq = md(\"**Freq**\")\n  )%>% \n  tab_header(\n    title = \"Actor 1 Frequency\",\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     ))\n\n#find the frequency of unique age gap values\nactor2Freq = as.data.frame(table(age_gaps$character_2_gender)) \n#rename Var1 to Age_Gap\nactor2Freq = rename(actor2Freq, Sex = Var1)\n\n#create table based on the frequency\nactor2_Table = actor2Freq%>% \n  gt()%>% \ncols_label(\n   Sex = md(\"**Sex**\"),\n   Freq = md(\"**Freq**\")\n  )%>% \n  tab_header(\n    title = \"Actor 2 Frequency\",\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     ))\n\n\nactor1Freq %>%\n  kable(\"html\", align = 'clc') %>%\n    kable_styling(full_width = F, position = \"float_left\")\nactor2Freq %>%\n  kable(\"html\", align = 'clc') %>%\n    kable_styling(full_width = F, position = \"right\")\n\n\nCharacter Sex Frequency Tables\n\n\n\n\nActor 1 \n \n  \n    Sex \n    Freq \n  \n \n\n  \n    man \n    941 \n  \n  \n    woman \n    214 \n  \n\n\n\n\n\n\nActor 2 \n \n  \n    Sex \n    Freq \n  \n \n\n  \n    man \n    215 \n  \n  \n    woman \n    940 \n  \n\n\n\n\n\n\n\n\n\nThere are more male older actors and than female. How does the age gap differ?\n\nggplot(age_gaps, aes(x=character_1_gender, y=age_difference,color=character_1_gender)) +geom_point() + \n  geom_line() + geom_boxplot()+ggtitle(\"Actor 1\") +theme(\n  plot.title = element_text(color=\"Black\", size=14, face=\"bold\"))\n\n\n\n\n**There is a larger age gap for male actors who are older than their partner than female actors who are older.\n###There are more female younger actors and than male How does the age gap differ?\n\nggplot(age_gaps, aes(x=character_2_gender, y=age_difference,color=character_2_gender)) +geom_point() + \n  geom_line() + geom_boxplot()+ geom_boxplot()+ggtitle(\"Actor 2\") +theme(\n  plot.title = element_text(color=\"Black\", size=14, face=\"bold\"))\n\n\n\n\n###Max Age difference by year\n\n#plot the max age difference each year over the years \nMax = age_gaps %>%\n  group_by(release_year) %>%\n  summarise(max = max(age_difference))\n\nggplot(Max, aes(x = release_year, y = max)) +\n  geom_line()+geom_smooth(method = \"loess\", color = \"red\", fill = \"red\")+ggtitle(\"Max Age difference by year\") +theme(\n  plot.title = element_text(color=\"Black\", size=14, face=\"bold\"))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nAverage age difference by year\n\n#plot the average age difference over the years \n\nAverageTable = age_gaps %>%\n  group_by(release_year) %>%\n  summarise(average = mean(age_difference))\n\nggplot(AverageTable, aes(x = release_year, y = average)) +\n  geom_line()+geom_smooth(method = \"loess\", color = \"red\", fill = \"red\")+ggtitle(\"Average Age difference by year\") +theme(\n  plot.title = element_text(color=\"Black\", size=14, face=\"bold\"))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nThere were alot more movies created in the later years so this may not be a great representation of the data set and age gaps over time.\n\n\nDo certain directors cast actors with larger age gaps?\nDirectors who cast with smaller age gaps\n\nd_small=age_gaps%>%\n  select(director,age_difference)%>%\n  filter(age_difference<25)%>%\n  count(director)%>%\n  arrange(desc(n))%>%\n  filter(n>1)\nnrow(d_small)\n\n[1] 245\n\n#create table\nd_small_Table = head(d_small)%>% \n  gt()%>% \ncols_label(\n   director = md(\"**Director**\"),\n   n = md(\"**Freq**\")\n  )%>% \n  tab_header(\n    title = \"Directors who cast small age gaps\",\n    subtitle = \"This table lists the head of the table of directors who cast actors in a movie with an age gap smaller than to 25 years at least 3 times\"\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     )) %>%\n  tab_source_note(\n    source_note = \"There are a total of 245 directors who cast at least 2 movies with age gaps below 25 years of age\"\n  )\n\nd_small_Table\n\n\n\n\n\n  \n    \n      Directors who cast small age gaps\n    \n    \n      This table lists the head of the table of directors who cast actors in a movie with an age gap smaller than to 25 years at least 3 times\n    \n  \n  \n    \n      Director\n      Freq\n    \n  \n  \n    Woody Allen\n12\n    John Glen\n11\n    Martin Scorsese\n11\n    Mike Newell\n10\n    Dennis Dugan\n9\n    Guy Hamilton\n9\n  \n  \n    \n      There are a total of 245 directors who cast at least 2 movies with age gaps below 25 years of age\n    \n  \n  \n\n\n\ndSmall_concat=inner_join(age_gaps,d_small,by=\"director\")\n\nDirectors who cast with larger age gaps (only ones with more than 1)\n\nd_large=age_gaps%>%\n  select(director,age_difference)%>%\n  filter(age_difference>=25)%>%\n  count(director)%>%\n  arrange(desc(n))%>%\n  filter(n>1)\nd_large\n\n# A tibble: 12 × 2\n   director                 n\n   <chr>                <int>\n 1 Woody Allen              8\n 2 John Glen                4\n 3 John Huston              3\n 4 Adrian Lyne              2\n 5 Alfred Hitchcock         2\n 6 Howard Hawks             2\n 7 Joel Coen                2\n 8 Martin Scorsese          2\n 9 Paul Thomas Anderson     2\n10 Roger Michell            2\n11 Scott Cooper             2\n12 Stanley Donen            2\n\ndLarge_concat=inner_join(age_gaps,d_large,by=\"director\")\n\n#create table\nd_large_Table = d_large%>% \n  gt()%>% \ncols_label(\n   director = md(\"**Director**\"),\n   n = md(\"**Freq**\")\n  )%>% \n  tab_header(\n    title = \"Directors with large age gaps\",\n    subtitle = \"This table lists the directors who cast actors in a movie with an aga gap greater than or equal to 25 at least 2 times\"\n  )%>% \n tab_style(\n     locations = cells_title(groups = \"title\"),\n     style     = list(\n       cell_text(weight = \"bold\", size = 24)\n     ))\n\nd_large_Table\n\n\n\n\n\n  \n    \n      Directors with large age gaps\n    \n    \n      This table lists the directors who cast actors in a movie with an aga gap greater than or equal to 25 at least 2 times\n    \n  \n  \n    \n      Director\n      Freq\n    \n  \n  \n    Woody Allen\n8\n    John Glen\n4\n    John Huston\n3\n    Adrian Lyne\n2\n    Alfred Hitchcock\n2\n    Howard Hawks\n2\n    Joel Coen\n2\n    Martin Scorsese\n2\n    Paul Thomas Anderson\n2\n    Roger Michell\n2\n    Scott Cooper\n2\n    Stanley Donen\n2\n  \n  \n  \n\n\n\n\n\np = plot_ly(dLarge_concat, x = ~director, y = ~age_difference,\n             type = \"scatter\", mode = 'markers', marker = list(color = \"blue\"), \n             text =~paste('</br> Director: ', director,\n                      '</br> Movie: ', movie_name,\n                      '</br> Age Gap: ', age_difference),\n             hoverinfo = \"text\")\np = p  %>% layout (title = \"Directors with age gaps over 25 years and their movies\",xaxis = list(title = \"Director\"), yaxis = list(title = \"Age Gap\"))\np"
  },
  {
    "objectID": "fluanalysis/code/wrangling.html",
    "href": "fluanalysis/code/wrangling.html",
    "title": "Flu Anlaysis - Wrangling",
    "section": "",
    "text": "── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.2.1     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nhere() starts at /Users/deannalanier/Desktop/All_Classes_UGA/2023Spr_Classes/MADA/deannalanier-MADA-portfolio\n\n\n\n\n\n\nraw_data = readRDS(here(\"fluanalysis\", \"data\", \"SympAct_Any_Pos.Rda\")) #load RDS file\n\n\n\n\n\nstr(raw_data) #ensure the data is complete\n\n'data.frame':   735 obs. of  63 variables:\n $ DxName1          : Factor w/ 92 levels \"Acute bronchitis, unspecified\",..: 57 16 57 57 9 57 39 17 57 57 ...\n $ DxName2          : Factor w/ 142 levels \"14 weeks gestation of pregnancy\",..: NA 69 11 129 69 NA 69 60 12 NA ...\n $ DxName3          : Factor w/ 92 levels \"Abnormal weight loss\",..: NA NA NA NA NA NA NA NA 38 NA ...\n $ DxName4          : Factor w/ 41 levels \"Acute bronchitis, unspecified\",..: NA NA NA NA NA NA NA NA 30 NA ...\n $ DxName5          : Factor w/ 5 levels \"Acute suppurative otitis media without spontaneous rupture of ear drum, right ear\",..: NA NA NA NA NA NA NA NA 3 NA ...\n $ Unique.Visit     : chr  \"340_17632125\" \"340_17794836\" \"342_17737773\" \"342_17806002\" ...\n $ ActivityLevel    : int  10 6 2 2 5 3 4 0 0 5 ...\n  ..- attr(*, \"label\")= chr \"Activity Level\"\n $ ActivityLevelF   : Factor w/ 11 levels \"0\",\"1\",\"2\",\"3\",..: 11 7 3 3 6 4 5 1 1 6 ...\n $ SwollenLymphNodes: Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 1 1 1 2 1 ...\n  ..- attr(*, \"label\")= chr \"Swollen Lymph Nodes\"\n $ ChestCongestion  : Factor w/ 2 levels \"No\",\"Yes\": 1 2 2 2 1 1 1 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Chest Congestion\"\n $ ChillsSweats     : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 2 2 2 2 2 2 1 ...\n  ..- attr(*, \"label\")= chr \"Chills/Sweats\"\n $ NasalCongestion  : Factor w/ 2 levels \"No\",\"Yes\": 1 2 2 2 1 1 1 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Nasal Congestion\"\n $ CoughYN          : Factor w/ 2 levels \"No\",\"Yes\": 2 2 1 2 1 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Cough\"\n $ Sneeze           : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 2 1 2 1 2 1 1 ...\n  ..- attr(*, \"label\")= chr \"Sneeze\"\n $ Fatigue          : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Fatigue\"\n $ SubjectiveFever  : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 2 2 2 1 ...\n  ..- attr(*, \"label\")= chr \"Subjective Fever\"\n $ Headache         : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 1 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Headache\"\n $ Weakness         : Factor w/ 4 levels \"None\",\"Mild\",..: 2 4 4 4 3 3 2 4 3 3 ...\n $ WeaknessYN       : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Weakness\"\n $ CoughIntensity   : Factor w/ 4 levels \"None\",\"Mild\",..: 4 4 2 3 1 3 4 3 3 3 ...\n  ..- attr(*, \"label\")= chr \"Cough Severity\"\n $ CoughYN2         : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 1 2 2 2 2 2 ...\n $ Myalgia          : Factor w/ 4 levels \"None\",\"Mild\",..: 2 4 4 4 2 3 2 4 3 2 ...\n $ MyalgiaYN        : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Myalgia\"\n $ RunnyNose        : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 2 1 1 2 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Runny Nose\"\n $ AbPain           : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Abdominal Pain\"\n $ ChestPain        : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 1 1 2 2 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Chest Pain\"\n $ Diarrhea         : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 2 1 1 1 1 ...\n $ EyePn            : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 2 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Eye Pain\"\n $ Insomnia         : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 2 2 1 1 2 2 2 ...\n  ..- attr(*, \"label\")= chr \"Sleeplessness\"\n $ ItchyEye         : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Itchy Eyes\"\n $ Nausea           : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 2 2 2 1 1 2 2 ...\n $ EarPn            : Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 2 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Ear Pain\"\n $ Hearing          : Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Loss of Hearing\"\n $ Pharyngitis      : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 2 2 2 2 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Sore Throat\"\n $ Breathless       : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 1 1 2 1 1 1 2 ...\n  ..- attr(*, \"label\")= chr \"Breathlessness\"\n $ ToothPn          : Factor w/ 2 levels \"No\",\"Yes\": 1 1 2 1 1 1 1 1 2 1 ...\n  ..- attr(*, \"label\")= chr \"Tooth Pain\"\n $ Vision           : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Blurred Vision\"\n $ Vomit            : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 2 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Vomiting\"\n $ Wheeze           : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 2 1 2 1 1 1 1 ...\n  ..- attr(*, \"label\")= chr \"Wheezing\"\n $ BodyTemp         : num  98.3 100.4 100.8 98.8 100.5 ...\n $ RapidFluA        : Factor w/ 2 levels \"Positive for Influenza A\",..: 2 NA 2 2 NA NA NA 1 2 2 ...\n $ RapidFluB        : Factor w/ 2 levels \"Positive for Influenza B\",..: 2 NA 2 2 NA NA NA 2 2 2 ...\n $ PCRFluA          : Factor w/ 4 levels \" Influenza A Detected\",..: NA NA NA NA NA NA 2 NA NA NA ...\n $ PCRFluB          : Factor w/ 3 levels \" Influenza B Detected\",..: NA NA NA NA NA NA 2 NA NA NA ...\n $ TransScore1      : num  1 3 4 5 0 2 2 5 4 4 ...\n $ TransScore1F     : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 2 4 5 6 1 3 3 6 5 5 ...\n  ..- attr(*, \"label\")= chr \"Infectiousness Score\"\n $ TransScore2      : num  1 2 3 4 0 2 2 4 3 3 ...\n $ TransScore2F     : Factor w/ 5 levels \"0\",\"1\",\"2\",\"3\",..: 2 3 4 5 1 3 3 5 4 4 ...\n  ..- attr(*, \"label\")= chr \"Infectiousness Score\"\n $ TransScore3      : num  1 1 2 3 0 2 2 3 2 2 ...\n $ TransScore3F     : Factor w/ 4 levels \"0\",\"1\",\"2\",\"3\": 2 2 3 4 1 3 3 4 3 3 ...\n  ..- attr(*, \"label\")= chr \"Infectiousness Score\"\n $ TransScore4      : num  0 2 4 4 0 1 1 4 3 3 ...\n $ TransScore4F     : Factor w/ 5 levels \"0\",\"1\",\"2\",\"3\",..: 1 3 5 5 1 2 2 5 4 4 ...\n $ ImpactScore      : int  7 8 14 12 11 12 8 7 10 7 ...\n $ ImpactScore2     : int  6 7 13 11 10 11 7 6 9 6 ...\n $ ImpactScore3     : int  3 4 9 7 6 7 3 3 6 4 ...\n $ ImpactScoreF     : Factor w/ 21 levels \"0\",\"1\",\"2\",\"3\",..: 8 9 15 13 12 13 9 8 11 8 ...\n  ..- attr(*, \"label\")= chr \"Morbidity Score\"\n $ ImpactScore2F    : Factor w/ 19 levels \"0\",\"1\",\"2\",\"3\",..: 7 8 14 12 11 12 8 7 10 7 ...\n  ..- attr(*, \"label\")= chr \"Morbidity Score\"\n $ ImpactScore3F    : Factor w/ 15 levels \"0\",\"1\",\"2\",\"3\",..: 4 5 10 8 7 8 4 4 7 5 ...\n  ..- attr(*, \"label\")= chr \"Morbidity Score\"\n $ ImpactScoreFD    : Factor w/ 17 levels \"2\",\"3\",\"4\",\"5\",..: 6 7 13 11 10 11 7 6 9 6 ...\n $ TotalSymp1       : num  8 11 18 17 11 14 10 12 14 11 ...\n $ TotalSymp1F      : Factor w/ 19 levels \"5\",\"6\",\"7\",\"8\",..: 4 7 14 13 7 10 6 8 10 7 ...\n $ TotalSymp2       : num  8 10 17 16 11 14 10 11 13 10 ...\n $ TotalSymp3       : num  8 9 16 15 11 14 10 10 12 9 ...\n\n\n\n\n\n1. Remove all variables that have Score or Total or FluA or FluB or Dxname or Activity or Unique.Visit\n2. Remove all observations with NA\nDon’t do this manually one by one, figure out how to use R commands that let you remove things in an efficient manner.\n\nclean_data = raw_data %>% #create new variable to ensure raw_data is not manipulated\n  select(-contains(c(\"Score\",\"Total\",\"FluA\",\"FluB\",\"Dxname\",\"Activity\")))%>% #select columns to remove\n  select(-c('Unique.Visit')) %>% #remove collumn\n  na.omit() #remove all observations with NA\n\n\n\n\n\ncleandata_location = here(\"fluanalysis\", \"data\", \"cleandata.rds\")\nsaveRDS(clean_data, file = cleandata_location)"
  }
]