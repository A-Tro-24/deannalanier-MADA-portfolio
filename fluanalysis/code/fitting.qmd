---
title: "Flu Anlaysis - Model Fitting"
output:
  html_document:
    toc: FALSE
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) #removes the warning messages from the markdown output
```

## Load Libraries

```{r echo = FALSE}
# Load Libraries
library(tidyverse) #data exploration packages
library(dplyr) #piping
library(here) #data location
library(tidymodels) #model fitting
library(gt) #create tables 
library(ggpubr)
library(performance)
library(vip)
library(qqplotr) #confidence bands
library(ggplot2)
library(dotwhisker)
```

## Load the data

```{r}
#path to clean data
data = readRDS(here("fluanalysis", "data", "cleandata.rds")) #load RDS file
```

## Fit a linear model to the continuous outcome (Body temperature) using only the main predictor of interest.

Our main predictor is **Runny Nose**

```{r}
#specify linear model to regression model
model1 = linear_reg() %>% 
  set_engine("lm") 

#fit the linear model to our main predictor
model_fit_1 = model1 %>% 
  fit(BodyTemp ~ RunnyNose, data=data)
  model_fit_1
```

Table of results #1

```{r}
tidy(model_fit_1) #table of model summary
```

#2

```{r}
#show results 
glance(model_fit_1)
```

Plot regression model as boxwhisker plot

```{r}
tidy(model_fit_1) %>% 
  dwplot(dot_args = list(size = 1, color = "black"),vline = geom_vline(xintercept = 0, colour = "black", linetype = 2),
         whisker_args = list(color = "blue")) + xlab("Estimate") + theme_minimal()
```

**Regression estimate for runny nose as a predictor is nearly -0.3**

plot performance

```{r}
mp1 = check_model(model_fit_1$fit)
#model_1_performance
```

Adjust the check_model output figure titles. This allows all the text on
the axis to be legible.

```{r}
#mp1
p1 = plot(mp1)

p1[[1]] = p1[[1]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p1[[2]] = p1[[2]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p1[[3]] = p1[[3]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p1[[4]] = p1[[4]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p1[[5]] = p1[[5]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p1 
```

## Fits another linear model to the continuous outcome using all (important) predictors of interest.

```{r}
#specify linear model to regression model
model2 = linear_reg() %>% 
  set_engine("lm") 

#fit the linear model to all predictors
model_fit_2 = model2 %>% 
  fit(BodyTemp ~., data=data)
  model_fit_2 #table of model summary

```

Table of model summary

```{r}
tidy(model_fit_2)#table of model summary
```

Plot regression model as boxwhisker plot

```{r}
tidy(model_fit_2) %>% 
  dwplot(dot_args = list(size = 1, color = "black"),vline = geom_vline(xintercept = 0, colour = "black", linetype = 2),
         whisker_args = list(color = "blue")) + xlab("Estimate") + theme_minimal()
```

Plot performance

```{r}
mp2 = check_model(model_fit_2$fit)
#model_1_performance
```

Adjust the check_model output figure titles. This allows all the text on
the axis to be legible.

```{r}

p2 = plot(mp2)

p2[[1]] = p2[[1]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p2[[2]] = p2[[2]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p2[[3]] = p2[[3]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p2[[4]] = p2[[4]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p2[[5]] = p2[[5]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p2[[6]] = p2[[6]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p2
```

## Compares the model results for the model with just the main predictor and all predictors.

```{r}
compare_performance(model_fit_1,model_fit_2)
```

## Fits a logistic model to the categorical outcome (Nausea) using only the main predictor of interest.

```{r}

#specify linear model logistic_reg() which generalized linear model for binary outcomes
model3 = logistic_reg() %>% 
  set_engine("glm") #fit model generalized linear model 

#fit the linear model to our main predictor
model_fit_3 = model3 %>% 
  fit(Nausea ~ RunnyNose, data=data)
  model_fit_3 #table of model summary

```

Table of results

#1

```{r}
tidy(model_fit_3) #table of model summary
```

#2

```{r}
#show results 
glance(model_fit_3)
```

Plot model as box whisker plot

```{r}
tidy(model_fit_3) %>% 
  dwplot(dot_args = list(size = 1, color = "black"),vline = geom_vline(xintercept = 0, colour = "black", linetype = 2),
         whisker_args = list(color = "blue")) + xlab("Estimate") + theme_minimal()
```

**Regression estimate for runny nose as a predictor is nearly 0.05**

plot performance

```{r}
mp3 = check_model(model_fit_3$fit)
#model_1_performance
```

Adjust the check_model output figure titles. This allows all the text on
the axis to be legible.

```{r}
#mp1
p3 = plot(mp3)

p3[[1]] = p3[[1]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p3[[2]] = p3[[2]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p3[[3]] = p3[[3]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p3[[4]] = p3[[4]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p3 
```

## Fits another logistic model to the categorical outcome using all (important) predictors of interest.

```{r}

#specify linear model logistic_reg() which generalized linear model for binary outcomes
model4 = logistic_reg() %>% 
  set_engine("glm") #fit model generalized linear model 

#fit the linear model to our main predictor
model_fit_4 = model4 %>% 
  fit(Nausea ~., data=data)
  model_fit_4

```

Table of model summary

```{r}
tidy(model_fit_4) #table of model summary
```

Plot model as box whisker plot

```{r}
tidy(model_fit_4) %>% 
  dwplot(dot_args = list(size = 1, color = "black"),vline = geom_vline(xintercept = 0, colour = "black", linetype = 2),
         whisker_args = list(color = "blue")) + xlab("Estimate") + theme_minimal()
```

\*\*Vomiting has the highest estimate at 2.4

Plot performance

```{r}
mp4 = check_model(model_fit_4$fit)

```

Adjust the check_model output figure titles. This allows all the text on
the axis to be legible.

```{r}

p4 = plot(mp4)

p4[[1]] = p4[[1]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p4[[2]] = p4[[2]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p4[[3]] = p4[[3]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p4[[4]] = p4[[4]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p4[[5]] = p4[[5]] + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5))
p4
```

## Compares the model results for the categorical model with just the main predictor and all predictors.

```{r}
compare_performance(model_fit_3,model_fit_4)
```
